package v2.order;import com.fasterxml.jackson.databind.JsonNode;import common.ApiResponse.ApiSuccess;import common.Attrs;import common.Authorization.PermissionBasedAuthorization;import common.customer.model.CustomerModel;import common.enums.PermissionType;import common.order.resources.OrderResource;import jakarta.inject.Inject;import play.Logger;import play.libs.Json;import play.libs.typedmap.TypedKey;import play.mvc.Controller;import play.mvc.Http;import play.mvc.Result;import play.mvc.With;import java.util.concurrent.CompletionStage;import static java.util.concurrent.CompletableFuture.supplyAsync;public class OrderController extends Controller {	private final OrderResourceHandler handler;	public final Logger.ALogger logger = Logger.of("v2.order.controller");	@Inject	public OrderController(OrderResourceHandler handler) {		this.handler = handler;	}	@PermissionBasedAuthorization({PermissionType.ORDER_CREATE})	@With(OrderAction.class)	public CompletionStage<Result> create(Http.Request request) {		CustomerModel customerModel = request.attrs().get(Attrs.CUSTOMER);		logger.info("[" + request.id() + "] " + "json " + request.body().asJson());		JsonNode json = request.body().asJson();		OrderResource resource = Json.fromJson(json, OrderResource.class);		return handler.createOrder(resource, customerModel).thenComposeAsync(				response -> {					logger.info("[" + request.id() + "] " + "response is " + response);					return supplyAsync(() -> ok(Json.toJson(new ApiSuccess(response))));				}		);	}	public CompletionStage<Result> getOrderList(Http.Request request) {		return supplyAsync(() -> ok(Json.toJson(new ApiSuccess("Order list"))));	}}