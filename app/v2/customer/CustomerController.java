package v2.customer;import com.fasterxml.jackson.databind.JsonNode;import common.ApiResponse.ApiFailure;import common.ApiResponse.ApiSuccess;import common.customer.resources.CustomerResource;import jakarta.inject.Inject;import play.Logger;import play.libs.Json;import play.mvc.Controller;import play.mvc.Http;import play.mvc.Result;import java.util.concurrent.CompletableFuture;import java.util.concurrent.CompletionStage;public class CustomerController extends Controller {    private final CustomerResourceHandler handler;    private final Logger.ALogger logger = Logger.of("application.CustomerController");    @Inject    public CustomerController(CustomerResourceHandler handler) {        this.handler = handler;    }    public CompletionStage<Result> create(Http.Request request) {        JsonNode json = request.body().asJson();        logger.info("["+request.id() +"] " + "json "+json.toString());        CustomerResource resource = Json.fromJson(json, CustomerResource.class);        if (json.isEmpty()) {            logger.error("["+request.id()+"] + error -> Request body can not be empty");            return CompletableFuture.supplyAsync(() -> badRequest(Json.toJson(new ApiFailure("Request body can not be empty"))));        }        return handler.create(resource).thenApplyAsync(                customer -> {                    logger.info("["+request.id()+"] " + customer.toString());//                    Map<String, String> payload = new HashMap<>();//                    payload.put("ROLE", "CUSTOMER");//                    payload.put("jwt", "123456789");                    return created(Json.toJson(new ApiSuccess(customer)));                }        );    }}