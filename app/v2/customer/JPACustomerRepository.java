package v2.customer;import common.customer.model.CustomerModel;import jakarta.inject.Inject;import jakarta.inject.Singleton;import jakarta.persistence.EntityManager;import play.Logger;import play.db.jpa.JPAApi;import java.util.concurrent.CompletionStage;import java.util.function.Function;import static java.util.concurrent.CompletableFuture.supplyAsync;@Singletonpublic class JPACustomerRepository implements CustomerRepository {    private final JPAApi jpaApi;    private final CustomerExecutionContext ce;    private final Logger.ALogger logger = Logger.of("application.CustomerController.JPACustomerRepository");    @Inject    public JPACustomerRepository(JPAApi jpaApi, CustomerExecutionContext ce) {        this.jpaApi = jpaApi;        this.ce = ce;    }    @Override    public CompletionStage<CustomerModel> createOrGet(CustomerModel model) {        logger.info("");        return jpaApi.withTransaction(                (Function<EntityManager, CompletionStage<CustomerModel>>)                        entityManager -> {                            entityManager.persist(model);                            entityManager.flush();                            logger.info("return added data from DB " +model);                            logger.info("entityManager " +entityManager);                            return supplyAsync(() -> model);                        }        );    }    @Override    public CompletionStage<CustomerModel> save(CustomerModel customerModel) {        return null;    }//    private <T> T wrap(Function<EntityManager, T> function){//        return jpaApi.withTransaction(function);//    }}