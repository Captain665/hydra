package v2.customer;import common.customer.CustomerBuilder;import common.customer.model.CustomerModel;import common.customer.resources.CustomerResource;import jakarta.inject.Inject;import play.Logger;import java.util.concurrent.CompletionStage;import static java.util.concurrent.CompletableFuture.supplyAsync;public class CustomerResourceHandler {    private final CustomerRepository repository;    private final Logger.ALogger logger = Logger.of("application.CustomerController.CustomerResourceHandler");    @Inject    public CustomerResourceHandler(CustomerRepository repository) {        this.repository = repository;    }    public CompletionStage<CustomerResource> create(CustomerResource resource) {        CustomerModel model = new CustomerBuilder()                .setFullName(resource.fullName)                .setMobile(resource.mobile)                .setEmailId(resource.emailId)                .setActive(resource.active)                .setPassword(resource.password)                .setGender(resource.getGender())                .build();        logger.info("customer builder is " + model);        return repository.createOrGet(model).thenComposeAsync(                customer -> {                    CustomerResource customerResource = new CustomerResource(customer);                    logger.info("return from the repository " + customerResource);                    return supplyAsync(() -> customerResource);                }        );    }}